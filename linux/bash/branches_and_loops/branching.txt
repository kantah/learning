Ветвление: основы
Синтаксис:
if [[ условие ]]
then
    # действия, если условие истинно
fi

Условия(строки):
-z <строка>  # строка пуста
-n <строка>  # строка не пуста
<стр1> == <стр2>  # строки равны
<стр1> != <стр2>  # строки не равны

if [[ -z $1 ]]
then
    echo "Первый аргумент пустой!"
fi

if [[ $var1 == $var2 ]]
then
    echo "Переменные равны!"
fi

Условия[числа(строки)]:
<число/строка> операция <число/строка>
-eq, (==)  # равно
-ne, (!=)  # не равно
-lt, (<)  # меньше
-le,  # меньше или равно
-gt, (>)  # больше
-ge,  # больше или равно
Строки сравниваются в лексикографическом порядке.
Флаги -eq, -ne, -lt, -gt применяются к числам, а значки ==, !=, <, > - к строкам. Если применить к строкам флаги, числа будут сравниваться как строки.
Между [[ ]] и условием должны быть пробелы.

Условия(файлы):
-e <путь>  # путь существует
-f <путь>  # это файл
-d <путь>  # это директория
-s <путь>  # размер файла больше ноля
-x <путь>  # этот файл исполняемый

Несколько условий можно объединить с помощью специальных логических операторов.
Условия логические
!  # отрицание логического выражения
&&  # логическое "И"
||  # логическое "ИЛИ"

Ветвление: альтернативы

if [[ условие ]]
then
    # действия, если условие истинно
else
    # действия, если условие ложно
fi

if [[ условие1 ]]
then
    # действия, если условие1 истинно
elif [[ условие2 ]]
then
    # действия, если условие1 ложно, но условие2 истинно
else
    # действия, если оба условия ложны
fi

Если надо проверить значение переменной на конкретные строки или конкретные числа, используем конструкцию case:
case переменная in
знач1)
    # действия, если переменная==знач1
знач2)
    # действия, если переменная==знач2
*)
    # действия, если переменная не равна ни одному варианту
esac

Примеры:
#!/usr/bin/bash
if [[ $# -ne 2 ]]
then
    echo "You should specify exactly two arguments!"  # дальше не идет конструкция exit, но программа завершится, т.к. выполнено первое условие
else
    case $1 in
        1)
            echo "Creating file $2"
            touch $2
            ;;
        2)
            echo "Creating dir $2"
            mkdir $2
            ;;
        *)
            echo "Wrong values!"
    esac
fi

Запускаем скрипт:
$ ./branching.sh
out: You should specify exactly two arguments!
$ ./branching.sh 1 file.txt
out: Creating file file.txt
$ ./branching.sh 2 dir
out: Creating dir dir
$ ./branching.sh "hello" dir
out: Wrong values!
$ ls
out: branching.sh  dir  file.txt

Скрипт с конструкцией elif:
#!/usr/bin/bash
if [[ -f $1 ]]
then
    echo "Removing file"
    rm $1
elif [[ -d $1 ]]
then
    echo "Removing dir"
    rm -r $1
else
    echo "Cant remove $1"
fi

