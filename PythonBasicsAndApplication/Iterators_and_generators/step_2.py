from random import random

class RandomIterator:
    """чтобы объект можно было итерировать добавляем метод __iter__()"""
    def __iter__(self):
        return self  # указывает на объект-итератор. В данном случае на самого себя (функция доисана позже, см. внизу)

    def __init__(self, k):
        self.k = k  # создаем атрибут экземпляра, указывающий сколько раз надо повторить итерацию
        self.i = 0  # счетчик, сколько итераций уже выполнено, инициализируем его нулем
    """для того чтобы экземпляр класса стал итератором, необходимо внутри класса определить функцию __next__()"""
    def __next__(self):
        if self.i < self.k:  # если число выполненных итераций меньше числа запланированных
            self.i += 1  # увеличиваем счетчик
            return random()  # возвращаем случайное число
        else:  # если число выпоненных итерация равно запланированному
            raise StopIteration  # бросаем ошибку StopIteration


x = RandomIterator(3)
# print(next(x))  # x - итератор next(x) == x.__next__()
# print(next(x))  # передаем в конструктор число k = 3 и запускаем print 4 раза. Первые три раза выведется
# print(next(x))  # случайное число, на четвертый раз получим ошибку StopIteration
# print(next(x))

iter(x)  # при попытке итерировать объект х получим ошибку TypeError: 'RandomIterator' object is not iterable,
# т.к. объект является итератором, но не итерируемым. Объявляем функцию __iter__ вначале тела класса.
